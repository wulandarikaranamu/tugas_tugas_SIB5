Soal 3.1
-------------------------------------------------------------------
1.	Tampilkan produk yang asset nya diatas 20jt
MariaDB [dbtok]> SELECT SUM(harga_beli * stok) as total from produk; //menghitung total asset
MariaDB [dbtoko]> SELECT * FROM produk WHERE harga_beli * stok > 20000000; ini yang betul

SELECT ...
2.	Tampilkan data produk beserta selisih stok dengan minimal stok
MariaDB [dbtoko]> SELECT SUM(stok - min_stok) as selisih from produk;

3.	Tampilkan total asset produk secara keseluruhan
MariaDB [dbtoko]> SELECT sum(stok) as total_asset from produk;

4.	Tampilkan data pelanggan yang lahirnya antara tahun 1980 sampai 1990
MariaDB [dbtoko]> SELECT * FROM pelanggan WHERE YEAR(tgl_lahir) BETWEEN 1999 AND 2004;

5.	Tampilkan data pelanggan yang lahirnya tahun 1998
MariaDB [dbtoko]> SELECT * FROM pelanggan WHERE YEAR(tgl_lahir)=1998;

6.	Tampilkan data pelanggan yang berulang tahun bulan agustus
MariaDB [dbtoko]> SELECT * FROM pelanggan WHERE MONTH(tgl_lahir)=08;

7.	Tampilkan data pelanggan : nama, tmp_lahir, tgl_lahir dan umur (selisih tahun sekarang dikurang tahun kelahiran)
MariaDB [dbtoko]> SELECT nama, tmp_lahir, tgl_lahir, (YEAR(NOW())-YEAR(tgl_lahir)) AS umur FROM pelanggan;

Soal 3.2
-------------------------------------------------------------------------

1.	Berapa jumlah pelanggan yang tahun lahirnya 1998
SELECT COUNT(*) AS jumlah_pelanggan_1998 FROM pelanggan WHERE YEAR(tgl_lahir) = 1998;


2.	Berapa jumlah pelanggan perempuan yang tempat lahirnya di Jakarta
SELECT COUNT(*) AS jumlah_pelanggan_perempuan_Jakarta FROM pelanggan WHERE jk = 'perempuan' AND tmp_lahir = 'Jakarta';

3.	Berapa jumlah total stok semua produk yang harga jualnya dibawah 10rb
SELECT SUM(stok) AS total_stok_harga_dibawah_10rb FROM produk WHERE harga_jual < 10000;

4.	Ada berapa produk yang mempunyai kode awal K
SELECT COUNT(*) AS jumlah_produk_kode_awal_K FROM produk WHERE kode LIKE 'K%';

5.	Berapa harga jual rata-rata produk yang diatas 1jt
SELECT AVG(harga_jual) AS rata_rata_harga_produk_diatas_1jt FROM produk WHERE harga_jual > 1000000;

6.	Tampilkan jumlah stok yang paling besar
SELECT MAX(stok) AS stok_terbesar FROM produk;

7.	Ada berapa produk yang stoknya kurang dari minimal stok
SELECT COUNT(*) AS jumlah_produk_stok_kurang_dari_minimal FROM produk WHERE stok < min_stok;

8.	Berapa total asset dari keseluruhan produk
SELECT SUM(harga_beli * stok) AS total_asset_produk FROM produk;

Soal 3.3
-------------------------------------------------------------------------
1.	Tampilkan data produk : id, nama, stok dan informasi jika stok telah sampai batas minimal atau kurang dari minimum stok dengan informasi ‘segera belanja’ jika tidak ‘stok aman’.
SELECT id, nama, stok,
    CASE
        WHEN stok <= minimal_stok THEN 'segera belanja'
        ELSE 'stok aman'
    END AS status_stok
FROM produk;

2.	Tampilkan data pelanggan: id, nama, umur dan kategori umur : jika umur < 17 → ‘muda’ , 17-55 → ‘Dewasa’, selainnya ‘Tua’
SELECT id, nama,
    CASE
        WHEN umur < 17 THEN 'muda'
        WHEN umur BETWEEN 17 AND 55 THEN 'Dewasa'
        ELSE 'Tua'
    END AS kategori_umur
FROM pelanggan;

3.	Tampilkan data produk: id, kode, nama, dan bonus untuk kode ‘TV01’ →’DVD Player’ , ‘K001’ → ‘Rice Cooker’ selain dari diatas ‘Tidak Ada’
SELECT id, kode, nama,
    CASE
        WHEN kode = 'TV01' THEN 'DVD Player'
        WHEN kode = 'K001' THEN 'Rice Cooker'
        ELSE 'Tidak Ada'
    END AS bonus
FROM produk;

Soal 3.4
-----------------------------------------------------------------------
1.	Tampilkan data statistik jumlah tempat lahir pelanggan
SELECT tempat_lahir, COUNT(*) AS jumlah_pelanggan FROM pelanggan GROUP BY tmp_lahir;

2.	Tampilkan jumlah statistik produk berdasarkan jenis produk
SELECT jenis_produk, COUNT(*) AS jumlah_produk FROM produk GROUP BY jenis_produk;

3.	Tampilkan data pelanggan yang usianya dibawah rata usia pelanggan
SELECT * FROM pelanggan WHERE tgl_lahir < (SELECT AVG(tgl_lahir) FROM pelanggan);
pada tahap ini menggunakan tgl_lahir karena tidak ada kolom umur pada dbpos

//SELECT * FROM pelanggan WHERE umur < (SELECT AVG(umur) FROM pelanggan);

4.	Tampilkan data produk yang harganya diatas rata-rata harga produk
SELECT * FROM produk WHERE harga_beli > (SELECT AVG(harga_beli) FROM produk);

5.	Tampilkan data pelanggan yang memiliki kartu dimana iuran tahunan kartu diatas 90rb
SELECT * FROM pelanggan WHERE kartu_id > 90000;
SELECT * FROM pelanggan WHERE kartu_id AS kartu_iuran_tahunan > 90000;

6.	Tampilkan statistik data produk dimana harga produknya dibawah rata-rata harga produk secara keseluruhan
SELECT AVG(harga_beli) AS rata_rata_harga_produk,
       MIN(harga_beli) AS harga_terendah,
       MAX(harga_beli) AS harga_tertinggi
FROM produk WHERE harga_beli < (SELECT AVG(harga_beli) FROM produk);

7.	Tampilkan data pelanggan yang memiliki kartu dimana diskon kartu yang diberikan diatas 3%
SELECT * FROM  pelanggan WHERE kartu_diskon > 0.03;